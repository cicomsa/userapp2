{"version":3,"sources":["components/PageLink/index.js","components/Header/index.js","components/Layout/index.js","components/CheckSVG/index.js","components/Table/index.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["PageLink","linkTitle","path","history","useHistory","type","onClick","push","Header","data","pathName","filter","content","map","Layout","children","useLocation","pathname","CheckSVG","className","viewBox","d","getData","pageAData","pageBData","pageCData","Table","table","useState","contentData","setContentData","apiEndpoint","columns","useEffect","column","key","title","c","keyName","toLowerCase","Content","find","pageDescription","pageTitle","App","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qtDAiBeA,EAdE,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,KACvBC,EAAUC,cAMhB,OACE,4BAAQC,KAAK,SAASC,QALJ,WAClBH,EAAQI,KAAKL,KAKVD,ICGQO,EAZA,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SACrB,OACE,6BAEID,EACGE,QAAO,SAAAC,GAAO,OAAIA,EAAQV,OAASQ,KACnCG,KAAI,SAAAD,GAAO,OAAI,kBAAC,EAAD,CAAUV,KAAMU,EAAQV,KAAMD,UAAWW,EAAQX,iB,OCQ5Da,EAZA,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAETL,EADWM,cACSC,SAE1B,OACE,oCACE,kBAAC,EAAD,CAAQR,KAAMA,EAAMC,SAAUA,IAC7BK,I,QCDQG,G,MARE,WACf,OACE,yBAAKC,UAAU,WAAWC,QAAQ,aAChC,0BAAMC,EAAE,iiB,wBCERC,G,MAAU,CACd,oBAAqBC,EACrB,oBAAqBC,EACrB,oBAAqBC,IA4CRC,EAzCD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACWC,mBAAS,IADpB,mBACpBC,EADoB,KACPC,EADO,KAEnBC,EAAyBJ,EAAzBI,YAAaC,EAAYL,EAAZK,QASrB,OAPAC,qBAAU,WAIRH,EAFaR,EAAQS,MAGrB,CAACA,EAAaF,IAGd,yBAAKV,UAAU,WAEXa,EAAQnB,KAAI,SAAAqB,GACV,OACE,yBAAKC,IAAKD,EAAOE,MAAOjB,UAAU,WAChC,2BAAIe,EAAOE,OAETP,EAAYhB,KAAI,SAAAwB,GACd,IAAMC,EAAUJ,EAAOE,MAAMG,cAE7B,OAEE,uBACEpB,WAA0B,IAAfkB,EAAEC,GAAoB,SAAW,GAC5CH,IAAKE,EAAEC,KAES,IAAfD,EAAEC,GAAoB,kBAAC,EAAD,MAAeD,EAAEC,aCpB/CE,EAjBC,WACd,IACM9B,EADWM,cACSC,SAGpBL,EAAUH,EAAKgC,MAAK,SAAA7B,GAAO,OAAIA,EAAQV,OAASQ,KAC9CiB,EAAqCf,EAArCe,MAAOe,EAA8B9B,EAA9B8B,gBAAiBC,EAAa/B,EAAb+B,UAEhC,OACE,oCACGA,GAAa,4BAAKA,GAClBD,GAAmB,2BAAIA,GACvBf,GAAS,kBAAC,EAAD,CAAOA,MAAOA,MCCfiB,EAZH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAO1C,KAAK,UAAU2C,UAAWL,IACjC,kBAAC,IAAD,CAAOtC,KAAK,UAAU2C,UAAWL,IACjC,kBAAC,IAAD,CAAOtC,KAAK,UAAU2C,UAAWL,OCArBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cdcaab76.chunk.js","sourcesContent":["import React from 'react'\nimport { useHistory } from \"react-router-dom\"\n\nconst PageLink = ({ linkTitle, path }) =>  {\n  const history = useHistory()\n\n  const handleClick = () => {\n    history.push(path);\n  }\n\n  return (\n    <button type=\"button\" onClick={handleClick}>\n      {linkTitle}\n    </button>\n  )\n}\n\nexport default PageLink\n","import React from 'react'\nimport PageLink from '../PageLink'\n\nconst Header = ({data, pathName}) => {\n  return (\n    <div>\n      {\n        data\n          .filter(content => content.path !== pathName)\n          .map(content => <PageLink path={content.path} linkTitle={content.linkTitle}/>)\n      }\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\nimport Header from '../Header'\nimport data from '../../data/pages.json'\n\nconst Layout = ({children}) => {\n  const location = useLocation()\n  const pathName = location.pathname\n\n  return (\n    <>\n      <Header data={data} pathName={pathName} />\n      {children}\n    </>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport './index.css'\n\nconst CheckSVG = () => {\n  return (\n    <svg className=\"svg-icon\" viewBox=\"0 0 20 20\">\n      <path d=\"M10.219,1.688c-4.471,0-8.094,3.623-8.094,8.094s3.623,8.094,8.094,8.094s8.094-3.623,8.094-8.094S14.689,1.688,10.219,1.688 M10.219,17.022c-3.994,0-7.242-3.247-7.242-7.241c0-3.994,3.248-7.242,7.242-7.242c3.994,0,7.241,3.248,7.241,7.242C17.46,13.775,14.213,17.022,10.219,17.022 M15.099,7.03c-0.167-0.167-0.438-0.167-0.604,0.002L9.062,12.48l-2.269-2.277c-0.166-0.167-0.437-0.167-0.603,0c-0.166,0.166-0.168,0.437-0.002,0.603l2.573,2.578c0.079,0.08,0.188,0.125,0.3,0.125s0.222-0.045,0.303-0.125l5.736-5.751C15.268,7.466,15.265,7.196,15.099,7.03\"></path>\n    </svg>\n  )\n}\n\nexport default CheckSVG\n","import React, { useEffect, useState } from 'react'\nimport CheckSVG from '../CheckSVG'\nimport pageAData from '../../data/page-a-data.json'\nimport pageBData from '../../data/page-b-data.json'\nimport pageCData from '../../data/page-c-data.json'\nimport './index.css'\n\n// only for mock data usage case\nconst getData = {\n  '/page-a-data.json': pageAData,\n  '/page-b-data.json': pageBData,\n  '/page-c-data.json': pageCData\n}\n\nconst Table = ({ table }) => {\n  const [contentData, setContentData] = useState([])\n  const { apiEndpoint, columns } = table\n\n  useEffect(() => {\n    // API call/GraphQL query replacement - fake\n    const data = getData[apiEndpoint]\n\n    setContentData(data)\n  },[apiEndpoint, contentData])\n\n  return (\n    <div className=\"wrapper\">\n      {\n        columns.map(column => {\n          return (\n            <div key={column.title} className=\"content\">\n              <p>{column.title}</p>\n              {\n                contentData.map(c => {\n                  const keyName = column.title.toLowerCase()\n\n                  return (\n                    // unique key errors to be fixed\n                    <p\n                      className={c[keyName] === true ? 'online' : ''}\n                      key={c[keyName]}\n                    >\n                      {c[keyName] === true ? <CheckSVG /> : c[keyName]}\n                    </p>\n                  )\n                })\n              }\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\nimport Table from '../Table'\nimport data from '../../data/pages.json'\n\nconst Content = () => {\n  const location = useLocation()\n  const pathName = location.pathname\n\n  // data should come from an API call/GraphQL query - mock functionality not implemented\n  const content = data.find(content => content.path === pathName)\n  const { table, pageDescription, pageTitle} = content\n\n  return (\n    <>\n      {pageTitle && <h2>{pageTitle}</h2>}\n      {pageDescription && <p>{pageDescription}</p>}\n      {table && <Table table={table} />}\n    </>\n  )\n}\n\nexport default Content\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Layout from './components/Layout'\nimport Content from './components/Content'\n\n// To implement a dynamic way to write the bellow Routes\nconst App = () => {\n  return (\n    <Router>\n      <Layout>\n        <Route path=\"/page-a\" component={Content} />\n        <Route path=\"/page-b\" component={Content} />\n        <Route path=\"/page-c\" component={Content} />\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}